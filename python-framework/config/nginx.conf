#运行用户
user www-data;

#启动进程,通常设置成和cpu的数量相等
worker_processes  4;

#全局错误日志及PID文件
error_log  /var/log/nginx/error.log;

pid        /var/run/nginx.pid;

#工作模式及连接数上限

events {

    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    use   epoll;

    #单个后台worker process进程的最大并发链接数
    worker_connections  10240;

    # multi_accept on;
    }

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {

    #设定mime类型,类型由mime.type文件定义
    include /etc/nginx/mime.types;

    default_type application/octet-stream;

    #设定日志格式
      access_log /var/log/nginx/access.log;

      #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用
      #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
      sendfile on;
      #tcp_nopush on;

    #连接超时时间
    #keepalive_timeout  0;

    keepalive_timeout  65;

    tcp_nodelay        on;

    upstream gather-city {
        server localhost:8383;
        #server localhost:8002;
        #server localhost:8003;
        }

    server {
        listen 8088 ;

        server_name gather.city.com;

    #    client_max_body_size 20m;
    #    client_body_buffer_size 512k;

        location / {

            proxy_redirect off;
            proxy_pass_header Server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header REMOTE_ADD $remote_addr;
            proxy_pass   http://localhost:8383;
            client_max_body_size 1000m;

            }


        location /upload {
                 #定义服务器的默认网站根目录位置
                 root   /root;

                # 转到后台处理URL,表示Nginx接收完上传的文件后，然后交给后端处理的地址
                upload_pass /resource/upload;

                # 临时保存路径, 可以使用散列
                # 上传模块接收到的文件临时存放的路径， 1 表示方式，该方式是需要在/tmp/nginx_upload下创建以0到9为目录名称的目录，上传时候会进行一个散列处理。
                upload_store /tmp/nginx_upload;

                # 上传文件的权限，rw表示读写 r只读
                upload_store_access user:rw group:rw all:rw;

                set $upload_field_name "file";

                # upload_resumable on;

                # 这里写入http报头，pass到后台页面后能获取这里set的报头字段
                upload_set_form_field "file_name" $upload_file_name;

                upload_set_form_field "content_type" $upload_content_type;

                upload_set_form_field "tmp_path" $upload_tmp_path;

                # Upload模块自动生成的一些信息，如文件大小与文件md5值
                upload_aggregate_form_field "md5" $upload_file_md5;

                upload_aggregate_form_field "size" $upload_file_size;

                # 允许的字段，允许全部可以 "^.*$"
                upload_pass_form_field "^.*$";

                # upload_pass_form_field "^submit$|^description$";

                # 每秒字节速度控制，0表示不受控制，默认0, 128K
                upload_limit_rate 0;

                # 如果pass页面是以下状态码，就删除此次上传的临时文件
                upload_cleanup 400 404 499 500-505;

                # 打开开关，意思就是把前端脚本请求的参数会传给后端的脚本语言，比如：http://192.168.1.251:9000/upload/?k=23,后台可以通过POST['k']来访问。
                upload_pass_args on;
            }
        }
}



